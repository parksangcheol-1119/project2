/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.45
 * Generated at: 2021-06-14 13:48:34 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._08Board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import model1.board.BoardDTO;
import java.util.List;
import java.util.HashMap;
import java.util.Map;
import model1.board.BoardDAO;

public final class ListSimple_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/08Board/../common/CommonLink.jsp", Long.valueOf(1623121599663L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("model1.board.BoardDTO");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("model1.board.BoardDAO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
 
//application내장객체를 인수로 DAO객체를 생성한다.(DB연결)
BoardDAO dao = new BoardDAO(application);

//파라미터를 저장하기 위해 Map컬렉션 생성
Map<String, Object> param = new HashMap<String, Object>();

//검색에 대한 파라미터를 받아서 변수에 저장
String searchField = request.getParameter("searchField");//검색할 필드명
String searchWord = request.getParameter("searchWord");//검색어
//사용자가 검색을 했다면...
if(searchWord!=null){
	//검색필드와 검색어를 Map에 추가한다. 
	param.put("searchField", searchField);
	param.put("searchWord", searchWord);
}
//게시물의 전체 갯수를 카운트하기 위한 메소드 호출
int totalCount = dao.selectCount(param);
//목록에 실제 출력할 레코드를 얻어오기 위한 메소드 호출
List<BoardDTO> boardLists = dao.selectList(param);
//자원해제
dao.close();

      out.write("      \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>회원제 게시판</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<h2>목록보기(List)</h2>\r\n");
      out.write("\t");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\t<h2>공통링크</h2>\r\n");
      out.write("\t<table border=\"1\" width=\"90%\">\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>\r\n");
      out.write("\t\t\t\t<!-- 로그인 여부를 판단하기 위해 session영역의 속성을\r\n");
      out.write("\t\t\t\t\t사용한다. session영역에 아무런 속성도 없다면 \r\n");
      out.write("\t\t\t\t\t로그아웃 상태이다. -->\r\n");
      out.write("\t\t\t\t");
 if(session.getAttribute("USER_ID")==null){ 
      out.write("\r\n");
      out.write("\t\t\t\t\t<a href=\"./member/Login.jsp\">로그인</a>\t\t\t\r\n");
      out.write("\t\t\t\t");
 }else{ 
      out.write("\r\n");
      out.write("\t\t\t\t\t<a href=\"./member/Logout.jsp\">로그아웃</a>\r\n");
      out.write("\t\t\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t</table>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t<!-- 검색폼 : 제목과 내용을 통해 검색할 수 있다. -->\r\n");
      out.write("\t<form method=\"get\">\r\n");
      out.write("\t<table border=\"1\" width=\"90%\">\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t\t<td align=\"center\">\r\n");
      out.write("\t\t\t<select name=\"searchField\">\r\n");
      out.write("\t\t\t\t<option value=\"title\">제목</option>\r\n");
      out.write("\t\t\t\t<option value=\"content\">내용</option>\r\n");
      out.write("\t\t\t</select>\r\n");
      out.write("\t\t\t<input type=\"text\" name=\"searchWord\" />\r\n");
      out.write("\t\t\t<input type=\"submit\" value=\"검색하기\" />\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t</tr>\t\r\n");
      out.write("\t</table>\t\r\n");
      out.write("\t</form>\r\n");
      out.write("\t\r\n");
      out.write("\t<!-- 목록 출력을 위한 테이블 -->\r\n");
      out.write("\t<table border=\"1\" width=\"90%\">\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<th width=\"10%\">번호</th>\r\n");
      out.write("\t\t\t<th width=\"50%\">제목</th>\r\n");
      out.write("\t\t\t<th width=\"15%\">작성자</th>\r\n");
      out.write("\t\t\t<th width=\"10%\">조회수</th>\r\n");
      out.write("\t\t\t<th width=\"15%\">작성일</th>\r\n");
      out.write("\t\t</tr>\r\n");

if(boardLists.isEmpty()){
	//컬렉션에 저장된 데이터가 없다면...

      out.write("\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td colspan=\"5\" align=\"center\">\r\n");
      out.write("\t\t\t\t등록된 게시물이 없습니다^^*\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t</tr>\r\n");

}
else{
	//컬렉션에 저장된 데이터가 있다면 해당 내용을 반복하여 출력한다.
	int vNum = 0;//목록의 가상번호로 사용
	int countNum = 0;	
	//List컬렉션에 저장된 갯수만큼 반복하기 위해 확장for문 사용
	for(BoardDTO dto : boardLists)
	{
		//게시물 카운트수를 통해 가상번호 부여
		vNum = totalCount--; 
		
		//getter()를 통해 출력한다.

      out.write("\r\n");
      out.write("\t\t<tr align=\"center\">\r\n");
      out.write("\t\t\t<td>");
      out.print(vNum);
      out.write("</td>\r\n");
      out.write("\t\t\t<td align=\"left\">\r\n");
      out.write("\t\t\t\t<a href=\"View.jsp?num=");
      out.print(dto.getNum());
      out.write('"');
      out.write('>');
      out.print(dto.getTitle());
      out.write("</a>\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t\t<td align=\"center\">");
      out.print(dto.getId());
      out.write("</td>\r\n");
      out.write("\t\t\t<td align=\"center\">");
      out.print(dto.getVisitcount());
      out.write("</td>\r\n");
      out.write("\t\t\t<td align=\"center\">");
      out.print(dto.getPostdate());
      out.write("</td>\r\n");
      out.write("\t\t</tr>\r\n");

	} 
}

      out.write("\r\n");
      out.write("\t</table>\r\n");
      out.write("\t<table border=\"1\" width=\"90%\">\r\n");
      out.write("\t\t<tr align=\"right\">\t\t\t\r\n");
      out.write("\t\t\t<td><button type=\"button\" onclick=\"location.href='Write.jsp';\">\r\n");
      out.write("\t\t\t\t글쓰기</button></td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t</table>\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
